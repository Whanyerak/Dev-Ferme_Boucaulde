wb = xlsx_package.workbook

wb.styles do |s|
  wb.add_worksheet(name: "Feuille 1") do |sheet|
    values = [" "] +
              ["Panier", "Nombre yaourts"] +
              @yaourts.map(&:name) +
              butters.map(&:name) +
              @cheeses.map(&:name)

    default_style = {
      alignment: {
        vertical: :center
      },
      border: { style: :thin, color: "00" },
      padding: { top: 10 }
    }

    styles = [
      s.add_style(default_style),
      s.add_style(default_style.merge(bg_color: 'E1BEE7', b: true)),
      s.add_style(default_style.merge(bg_color: 'E1BEE7', b: true))
    ]

    # Properly set the background color for the different kind of resources
    # (i.e. yogurts, butters, cheeses)
    @yaourts.size.times do
      styles << s.add_style(default_style.merge(bg_color: 'F7E06C', b: true))
    end

    butters.size.times do
      styles << s.add_style(default_style.merge(bg_color: 'F79B6C', b: true))
    end

    @cheeses.size.times do
      styles << s.add_style(default_style.merge(bg_color: 'C9F76C', b: true))
    end

    sheet.add_row values, style: styles, height: 20

    # Count the total values on a per resource basis
    total  = ["Totaux", "", ""]
    resources = [{
        collection: @yaourts,
        name:       :yaourts,
        totals:     Array.new(@yaourts.size, 0)
      },
      {
        collection: butters,
        name:       :butters,
        totals:     Array.new(butters.size, 0)
      },
      {
        collection: @cheeses,
        name:       :cheeses,
        totals:     Array.new(@cheeses.size, 0)
      }
    ]

    # Add the different users and make the totals
    @distribution_point.users.each_with_index do |user, index|
      user_default_style = default_style.merge(bg_color: '6CBFF7')

      if index % 3 == 0
        user_default_style = user_default_style.merge(bg_color: 'FFFFFF')
      elsif index % 2 == 0
        user_default_style = user_default_style.merge(bg_color: '8294AF')
      end

      user_values = [user.full_name + "    "]
      user_styles = [s.add_style(user_default_style)] * 3

      user_values << user.ordering.cart.name
      user_values << user.ordering.nb_yaourts

      resources.each do |resource, rindex|
        resource[:collection].each_with_index do |element, eindex|
          value = user.send(resource[:name]).fetch(element.id, 0)

          resource[:totals][eindex] += value

          user_values << value
          user_styles << s.add_style(user_default_style)
        end
      end

      sheet.add_row user_values, style: user_styles, height: 20
    end

    total << resources[0][:totals]
    total << resources[1][:totals]
    total << resources[2][:totals]
    total.flatten!

    sheet.rows.insert(1, Axlsx::Row.new(
      sheet,
      total,
      style: [s.add_style(default_style.merge(b: true))] * total.size,
      height: 20
    ))

    # Tricky, to avoid a duplicate in our sheet
    sheet.rows.delete_at(sheet.rows.size-1)
  end
end
